// Code generated by Thrift Compiler (0.20.0). DO NOT EDIT.

package calculator_service

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type Int int32

func IntPtr(v Int) *Int { return &v }

type CalculatorService interface {
  // Parameters:
  //  - Num1
  //  - Num2
  Add(ctx context.Context, num1 Int, num2 Int) (_r Int, _err error)
  // Parameters:
  //  - Num1
  //  - Num2
  Subtract(ctx context.Context, num1 Int, num2 Int) (_r Int, _err error)
  // Parameters:
  //  - Num1
  //  - Num2
  Multiply(ctx context.Context, num1 Int, num2 Int) (_r Int, _err error)
  // Parameters:
  //  - Num1
  //  - Num2
  Divide(ctx context.Context, num1 Int, num2 Int) (_r Int, _err error)
}

type CalculatorServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewCalculatorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CalculatorServiceClient {
  return &CalculatorServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCalculatorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CalculatorServiceClient {
  return &CalculatorServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCalculatorServiceClient(c thrift.TClient) *CalculatorServiceClient {
  return &CalculatorServiceClient{
    c: c,
  }
}

func (p *CalculatorServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *CalculatorServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *CalculatorServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Num1
//  - Num2
func (p *CalculatorServiceClient) Add(ctx context.Context, num1 Int, num2 Int) (_r Int, _err error) {
  var _args0 CalculatorServiceAddArgs
  _args0.Num1 = num1
  _args0.Num2 = num2
  var _result2 CalculatorServiceAddResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "add", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - Num1
//  - Num2
func (p *CalculatorServiceClient) Subtract(ctx context.Context, num1 Int, num2 Int) (_r Int, _err error) {
  var _args3 CalculatorServiceSubtractArgs
  _args3.Num1 = num1
  _args3.Num2 = num2
  var _result5 CalculatorServiceSubtractResult
  var _meta4 thrift.ResponseMeta
  _meta4, _err = p.Client_().Call(ctx, "subtract", &_args3, &_result5)
  p.SetLastResponseMeta_(_meta4)
  if _err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Num1
//  - Num2
func (p *CalculatorServiceClient) Multiply(ctx context.Context, num1 Int, num2 Int) (_r Int, _err error) {
  var _args6 CalculatorServiceMultiplyArgs
  _args6.Num1 = num1
  _args6.Num2 = num2
  var _result8 CalculatorServiceMultiplyResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "multiply", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Num1
//  - Num2
func (p *CalculatorServiceClient) Divide(ctx context.Context, num1 Int, num2 Int) (_r Int, _err error) {
  var _args9 CalculatorServiceDivideArgs
  _args9.Num1 = num1
  _args9.Num2 = num2
  var _result11 CalculatorServiceDivideResult
  var _meta10 thrift.ResponseMeta
  _meta10, _err = p.Client_().Call(ctx, "divide", &_args9, &_result11)
  p.SetLastResponseMeta_(_meta10)
  if _err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type CalculatorServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CalculatorService
}

func (p *CalculatorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CalculatorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CalculatorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCalculatorServiceProcessor(handler CalculatorService) *CalculatorServiceProcessor {

  self12 := &CalculatorServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["add"] = &calculatorServiceProcessorAdd{handler:handler}
  self12.processorMap["subtract"] = &calculatorServiceProcessorSubtract{handler:handler}
  self12.processorMap["multiply"] = &calculatorServiceProcessorMultiply{handler:handler}
  self12.processorMap["divide"] = &calculatorServiceProcessorDivide{handler:handler}
return self12
}

func (p *CalculatorServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x13.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x13

}

type calculatorServiceProcessorAdd struct {
  handler CalculatorService
}

func (p *calculatorServiceProcessorAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err14 error
  args := CalculatorServiceAddArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CalculatorServiceAddResult{}
  if retval, err2 := p.handler.Add(ctx, args.Num1, args.Num2); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc15 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "add", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err14 = thrift.WrapTException(err2)
    }
    if err2 := _exc15.Write(ctx, oprot); _write_err14 == nil && err2 != nil {
      _write_err14 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err14 == nil && err2 != nil {
      _write_err14 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err14 == nil && err2 != nil {
      _write_err14 = thrift.WrapTException(err2)
    }
    if _write_err14 != nil {
      return false, thrift.WrapTException(_write_err14)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "add", thrift.REPLY, seqId); err2 != nil {
    _write_err14 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err14 == nil && err2 != nil {
    _write_err14 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err14 == nil && err2 != nil {
    _write_err14 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err14 == nil && err2 != nil {
    _write_err14 = thrift.WrapTException(err2)
  }
  if _write_err14 != nil {
    return false, thrift.WrapTException(_write_err14)
  }
  return true, err
}

type calculatorServiceProcessorSubtract struct {
  handler CalculatorService
}

func (p *calculatorServiceProcessorSubtract) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err16 error
  args := CalculatorServiceSubtractArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "subtract", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CalculatorServiceSubtractResult{}
  if retval, err2 := p.handler.Subtract(ctx, args.Num1, args.Num2); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc17 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing subtract: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "subtract", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err16 = thrift.WrapTException(err2)
    }
    if err2 := _exc17.Write(ctx, oprot); _write_err16 == nil && err2 != nil {
      _write_err16 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err16 == nil && err2 != nil {
      _write_err16 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err16 == nil && err2 != nil {
      _write_err16 = thrift.WrapTException(err2)
    }
    if _write_err16 != nil {
      return false, thrift.WrapTException(_write_err16)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "subtract", thrift.REPLY, seqId); err2 != nil {
    _write_err16 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err16 == nil && err2 != nil {
    _write_err16 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err16 == nil && err2 != nil {
    _write_err16 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err16 == nil && err2 != nil {
    _write_err16 = thrift.WrapTException(err2)
  }
  if _write_err16 != nil {
    return false, thrift.WrapTException(_write_err16)
  }
  return true, err
}

type calculatorServiceProcessorMultiply struct {
  handler CalculatorService
}

func (p *calculatorServiceProcessorMultiply) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err18 error
  args := CalculatorServiceMultiplyArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiply", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CalculatorServiceMultiplyResult{}
  if retval, err2 := p.handler.Multiply(ctx, args.Num1, args.Num2); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc19 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiply: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "multiply", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if err2 := _exc19.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if _write_err18 != nil {
      return false, thrift.WrapTException(_write_err18)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "multiply", thrift.REPLY, seqId); err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if _write_err18 != nil {
    return false, thrift.WrapTException(_write_err18)
  }
  return true, err
}

type calculatorServiceProcessorDivide struct {
  handler CalculatorService
}

func (p *calculatorServiceProcessorDivide) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err20 error
  args := CalculatorServiceDivideArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "divide", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CalculatorServiceDivideResult{}
  if retval, err2 := p.handler.Divide(ctx, args.Num1, args.Num2); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc21 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing divide: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "divide", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if err2 := _exc21.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if _write_err20 != nil {
      return false, thrift.WrapTException(_write_err20)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "divide", thrift.REPLY, seqId); err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if _write_err20 != nil {
    return false, thrift.WrapTException(_write_err20)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Num1
//  - Num2
type CalculatorServiceAddArgs struct {
  Num1 Int `thrift:"num1,1" db:"num1" json:"num1"`
  Num2 Int `thrift:"num2,2" db:"num2" json:"num2"`
}

func NewCalculatorServiceAddArgs() *CalculatorServiceAddArgs {
  return &CalculatorServiceAddArgs{}
}


func (p *CalculatorServiceAddArgs) GetNum1() Int {
  return p.Num1
}

func (p *CalculatorServiceAddArgs) GetNum2() Int {
  return p.Num2
}
func (p *CalculatorServiceAddArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CalculatorServiceAddArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Int(v)
  p.Num1 = temp
}
  return nil
}

func (p *CalculatorServiceAddArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.Num2 = temp
}
  return nil
}

func (p *CalculatorServiceAddArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorServiceAddArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num1: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Num1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num1: ", p), err) }
  return err
}

func (p *CalculatorServiceAddArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num2: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Num2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num2: ", p), err) }
  return err
}

func (p *CalculatorServiceAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceAddArgs(%+v)", *p)
}

func (p *CalculatorServiceAddArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*calculator_service.CalculatorServiceAddArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*CalculatorServiceAddArgs)(nil)

// Attributes:
//  - Success
type CalculatorServiceAddResult struct {
  Success *Int `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCalculatorServiceAddResult() *CalculatorServiceAddResult {
  return &CalculatorServiceAddResult{}
}

var CalculatorServiceAddResult_Success_DEFAULT Int
func (p *CalculatorServiceAddResult) GetSuccess() Int {
  if !p.IsSetSuccess() {
    return CalculatorServiceAddResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *CalculatorServiceAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CalculatorServiceAddResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CalculatorServiceAddResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Int(v)
  p.Success = &temp
}
  return nil
}

func (p *CalculatorServiceAddResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorServiceAddResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CalculatorServiceAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceAddResult(%+v)", *p)
}

func (p *CalculatorServiceAddResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*calculator_service.CalculatorServiceAddResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*CalculatorServiceAddResult)(nil)

// Attributes:
//  - Num1
//  - Num2
type CalculatorServiceSubtractArgs struct {
  Num1 Int `thrift:"num1,1" db:"num1" json:"num1"`
  Num2 Int `thrift:"num2,2" db:"num2" json:"num2"`
}

func NewCalculatorServiceSubtractArgs() *CalculatorServiceSubtractArgs {
  return &CalculatorServiceSubtractArgs{}
}


func (p *CalculatorServiceSubtractArgs) GetNum1() Int {
  return p.Num1
}

func (p *CalculatorServiceSubtractArgs) GetNum2() Int {
  return p.Num2
}
func (p *CalculatorServiceSubtractArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CalculatorServiceSubtractArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Int(v)
  p.Num1 = temp
}
  return nil
}

func (p *CalculatorServiceSubtractArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.Num2 = temp
}
  return nil
}

func (p *CalculatorServiceSubtractArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "subtract_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorServiceSubtractArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num1: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Num1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num1: ", p), err) }
  return err
}

func (p *CalculatorServiceSubtractArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num2: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Num2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num2: ", p), err) }
  return err
}

func (p *CalculatorServiceSubtractArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceSubtractArgs(%+v)", *p)
}

func (p *CalculatorServiceSubtractArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*calculator_service.CalculatorServiceSubtractArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*CalculatorServiceSubtractArgs)(nil)

// Attributes:
//  - Success
type CalculatorServiceSubtractResult struct {
  Success *Int `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCalculatorServiceSubtractResult() *CalculatorServiceSubtractResult {
  return &CalculatorServiceSubtractResult{}
}

var CalculatorServiceSubtractResult_Success_DEFAULT Int
func (p *CalculatorServiceSubtractResult) GetSuccess() Int {
  if !p.IsSetSuccess() {
    return CalculatorServiceSubtractResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *CalculatorServiceSubtractResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CalculatorServiceSubtractResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CalculatorServiceSubtractResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Int(v)
  p.Success = &temp
}
  return nil
}

func (p *CalculatorServiceSubtractResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "subtract_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorServiceSubtractResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CalculatorServiceSubtractResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceSubtractResult(%+v)", *p)
}

func (p *CalculatorServiceSubtractResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*calculator_service.CalculatorServiceSubtractResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*CalculatorServiceSubtractResult)(nil)

// Attributes:
//  - Num1
//  - Num2
type CalculatorServiceMultiplyArgs struct {
  Num1 Int `thrift:"num1,1" db:"num1" json:"num1"`
  Num2 Int `thrift:"num2,2" db:"num2" json:"num2"`
}

func NewCalculatorServiceMultiplyArgs() *CalculatorServiceMultiplyArgs {
  return &CalculatorServiceMultiplyArgs{}
}


func (p *CalculatorServiceMultiplyArgs) GetNum1() Int {
  return p.Num1
}

func (p *CalculatorServiceMultiplyArgs) GetNum2() Int {
  return p.Num2
}
func (p *CalculatorServiceMultiplyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CalculatorServiceMultiplyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Int(v)
  p.Num1 = temp
}
  return nil
}

func (p *CalculatorServiceMultiplyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.Num2 = temp
}
  return nil
}

func (p *CalculatorServiceMultiplyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiply_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorServiceMultiplyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num1: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Num1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num1: ", p), err) }
  return err
}

func (p *CalculatorServiceMultiplyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num2: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Num2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num2: ", p), err) }
  return err
}

func (p *CalculatorServiceMultiplyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceMultiplyArgs(%+v)", *p)
}

func (p *CalculatorServiceMultiplyArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*calculator_service.CalculatorServiceMultiplyArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*CalculatorServiceMultiplyArgs)(nil)

// Attributes:
//  - Success
type CalculatorServiceMultiplyResult struct {
  Success *Int `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCalculatorServiceMultiplyResult() *CalculatorServiceMultiplyResult {
  return &CalculatorServiceMultiplyResult{}
}

var CalculatorServiceMultiplyResult_Success_DEFAULT Int
func (p *CalculatorServiceMultiplyResult) GetSuccess() Int {
  if !p.IsSetSuccess() {
    return CalculatorServiceMultiplyResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *CalculatorServiceMultiplyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CalculatorServiceMultiplyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CalculatorServiceMultiplyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Int(v)
  p.Success = &temp
}
  return nil
}

func (p *CalculatorServiceMultiplyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiply_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorServiceMultiplyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CalculatorServiceMultiplyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceMultiplyResult(%+v)", *p)
}

func (p *CalculatorServiceMultiplyResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*calculator_service.CalculatorServiceMultiplyResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*CalculatorServiceMultiplyResult)(nil)

// Attributes:
//  - Num1
//  - Num2
type CalculatorServiceDivideArgs struct {
  Num1 Int `thrift:"num1,1" db:"num1" json:"num1"`
  Num2 Int `thrift:"num2,2" db:"num2" json:"num2"`
}

func NewCalculatorServiceDivideArgs() *CalculatorServiceDivideArgs {
  return &CalculatorServiceDivideArgs{}
}


func (p *CalculatorServiceDivideArgs) GetNum1() Int {
  return p.Num1
}

func (p *CalculatorServiceDivideArgs) GetNum2() Int {
  return p.Num2
}
func (p *CalculatorServiceDivideArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CalculatorServiceDivideArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Int(v)
  p.Num1 = temp
}
  return nil
}

func (p *CalculatorServiceDivideArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.Num2 = temp
}
  return nil
}

func (p *CalculatorServiceDivideArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "divide_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorServiceDivideArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num1: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Num1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num1: ", p), err) }
  return err
}

func (p *CalculatorServiceDivideArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "num2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num2: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Num2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num2: ", p), err) }
  return err
}

func (p *CalculatorServiceDivideArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceDivideArgs(%+v)", *p)
}

func (p *CalculatorServiceDivideArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*calculator_service.CalculatorServiceDivideArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*CalculatorServiceDivideArgs)(nil)

// Attributes:
//  - Success
type CalculatorServiceDivideResult struct {
  Success *Int `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCalculatorServiceDivideResult() *CalculatorServiceDivideResult {
  return &CalculatorServiceDivideResult{}
}

var CalculatorServiceDivideResult_Success_DEFAULT Int
func (p *CalculatorServiceDivideResult) GetSuccess() Int {
  if !p.IsSetSuccess() {
    return CalculatorServiceDivideResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *CalculatorServiceDivideResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CalculatorServiceDivideResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CalculatorServiceDivideResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Int(v)
  p.Success = &temp
}
  return nil
}

func (p *CalculatorServiceDivideResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "divide_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorServiceDivideResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CalculatorServiceDivideResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceDivideResult(%+v)", *p)
}

func (p *CalculatorServiceDivideResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*calculator_service.CalculatorServiceDivideResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*CalculatorServiceDivideResult)(nil)


