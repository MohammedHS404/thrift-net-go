/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net6
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

public partial class CalculatorService
{
  public interface IAsync
  {
    global::System.Threading.Tasks.Task<int> @add(int num1, int num2, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<int> @subtract(int num1, int num2, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<int> @multiply(int num1, int num2, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<int> @divide(int num1, int num2, CancellationToken cancellationToken = default);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task<int> @add(int num1, int num2, CancellationToken cancellationToken = default)
    {
      await send_add(num1, num2, cancellationToken);
      return await recv_add(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_add(int num1, int num2, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("add", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp0 = new InternalStructs.add_args() {
        Num1 = num1,
        Num2 = num2,
      };
      
      await tmp0.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<int> recv_add(CancellationToken cancellationToken = default)
    {
      
      var tmp1 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp1.Type == TMessageType.Exception)
      {
        var tmp2 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp2;
      }

      var tmp3 = new InternalStructs.add_result();
      await tmp3.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp3.__isset.success)
      {
        return tmp3.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<int> @subtract(int num1, int num2, CancellationToken cancellationToken = default)
    {
      await send_subtract(num1, num2, cancellationToken);
      return await recv_subtract(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_subtract(int num1, int num2, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("subtract", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp4 = new InternalStructs.subtract_args() {
        Num1 = num1,
        Num2 = num2,
      };
      
      await tmp4.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<int> recv_subtract(CancellationToken cancellationToken = default)
    {
      
      var tmp5 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp5.Type == TMessageType.Exception)
      {
        var tmp6 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp6;
      }

      var tmp7 = new InternalStructs.subtract_result();
      await tmp7.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp7.__isset.success)
      {
        return tmp7.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "subtract failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<int> @multiply(int num1, int num2, CancellationToken cancellationToken = default)
    {
      await send_multiply(num1, num2, cancellationToken);
      return await recv_multiply(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_multiply(int num1, int num2, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("multiply", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp8 = new InternalStructs.multiply_args() {
        Num1 = num1,
        Num2 = num2,
      };
      
      await tmp8.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<int> recv_multiply(CancellationToken cancellationToken = default)
    {
      
      var tmp9 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp9.Type == TMessageType.Exception)
      {
        var tmp10 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp10;
      }

      var tmp11 = new InternalStructs.multiply_result();
      await tmp11.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp11.__isset.success)
      {
        return tmp11.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "multiply failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<int> @divide(int num1, int num2, CancellationToken cancellationToken = default)
    {
      await send_divide(num1, num2, cancellationToken);
      return await recv_divide(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_divide(int num1, int num2, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("divide", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp12 = new InternalStructs.divide_args() {
        Num1 = num1,
        Num2 = num2,
      };
      
      await tmp12.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<int> recv_divide(CancellationToken cancellationToken = default)
    {
      
      var tmp13 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp13.Type == TMessageType.Exception)
      {
        var tmp14 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp14;
      }

      var tmp15 = new InternalStructs.divide_result();
      await tmp15.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp15.__isset.success)
      {
        return tmp15.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "divide failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor>? _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["add"] = add_ProcessAsync;
      processMap_["subtract"] = subtract_ProcessAsync;
      processMap_["multiply"] = multiply_ProcessAsync;
      processMap_["divide"] = divide_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out var fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task add_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp16 = new InternalStructs.add_args();
      await tmp16.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp17 = new InternalStructs.add_result();
      try
      {
        tmp17.Success = await _iAsync.@add(tmp16.Num1, tmp16.Num2, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("add", TMessageType.Reply, seqid), cancellationToken); 
        await tmp17.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp18)
      {
        var tmp19 = $"Error occurred in {GetType().FullName}: {tmp18.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp18, tmp19);
        else
          Console.Error.WriteLine(tmp19);
        var tmp20 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("add", TMessageType.Exception, seqid), cancellationToken);
        await tmp20.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task subtract_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp21 = new InternalStructs.subtract_args();
      await tmp21.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp22 = new InternalStructs.subtract_result();
      try
      {
        tmp22.Success = await _iAsync.@subtract(tmp21.Num1, tmp21.Num2, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("subtract", TMessageType.Reply, seqid), cancellationToken); 
        await tmp22.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp23)
      {
        var tmp24 = $"Error occurred in {GetType().FullName}: {tmp23.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp23, tmp24);
        else
          Console.Error.WriteLine(tmp24);
        var tmp25 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("subtract", TMessageType.Exception, seqid), cancellationToken);
        await tmp25.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task multiply_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp26 = new InternalStructs.multiply_args();
      await tmp26.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp27 = new InternalStructs.multiply_result();
      try
      {
        tmp27.Success = await _iAsync.@multiply(tmp26.Num1, tmp26.Num2, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("multiply", TMessageType.Reply, seqid), cancellationToken); 
        await tmp27.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp28)
      {
        var tmp29 = $"Error occurred in {GetType().FullName}: {tmp28.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp28, tmp29);
        else
          Console.Error.WriteLine(tmp29);
        var tmp30 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("multiply", TMessageType.Exception, seqid), cancellationToken);
        await tmp30.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task divide_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp31 = new InternalStructs.divide_args();
      await tmp31.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp32 = new InternalStructs.divide_result();
      try
      {
        tmp32.Success = await _iAsync.@divide(tmp31.Num1, tmp31.Num2, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("divide", TMessageType.Reply, seqid), cancellationToken); 
        await tmp32.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp33)
      {
        var tmp34 = $"Error occurred in {GetType().FullName}: {tmp33.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp33, tmp34);
        else
          Console.Error.WriteLine(tmp34);
        var tmp35 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("divide", TMessageType.Exception, seqid), cancellationToken);
        await tmp35.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class add_args : TBase
    {
      private int _num1;
      private int _num2;

      public int Num1
      {
        get
        {
          return _num1;
        }
        set
        {
          __isset.num1 = true;
          this._num1 = value;
        }
      }

      public int Num2
      {
        get
        {
          return _num2;
        }
        set
        {
          __isset.num2 = true;
          this._num2 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool num1;
        public bool num2;
      }

      public add_args()
      {
      }

      public add_args DeepCopy()
      {
        var tmp36 = new add_args()
        {
        };
        if(__isset.num1)
        {
          tmp36.Num1 = this.Num1;
        }
        tmp36.__isset.num1 = this.__isset.num1;
        if(__isset.num2)
        {
          tmp36.Num2 = this.Num2;
        }
        tmp36.__isset.num2 = this.__isset.num2;
        return tmp36;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Num1 = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Num2 = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp37 = new TStruct("add_args");
          await oprot.WriteStructBeginAsync(tmp37, cancellationToken);
          var tmp38 = new TField();
          if(__isset.num1)
          {
            tmp38.Name = "num1";
            tmp38.Type = TType.I32;
            tmp38.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
            await oprot.WriteI32Async(Num1, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.num2)
          {
            tmp38.Name = "num2";
            tmp38.Type = TType.I32;
            tmp38.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
            await oprot.WriteI32Async(Num2, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not add_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.num1 == other.__isset.num1) && ((!__isset.num1) || (global::System.Object.Equals(Num1, other.Num1))))
          && ((__isset.num2 == other.__isset.num2) && ((!__isset.num2) || (global::System.Object.Equals(Num2, other.Num2))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.num1)
          {
            hashcode = (hashcode * 397) + Num1.GetHashCode();
          }
          if(__isset.num2)
          {
            hashcode = (hashcode * 397) + Num2.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp39 = new StringBuilder("add_args(");
        int tmp40 = 0;
        if(__isset.num1)
        {
          if(0 < tmp40++) { tmp39.Append(", "); }
          tmp39.Append("Num1: ");
          Num1.ToString(tmp39);
        }
        if(__isset.num2)
        {
          if(0 < tmp40++) { tmp39.Append(", "); }
          tmp39.Append("Num2: ");
          Num2.ToString(tmp39);
        }
        tmp39.Append(')');
        return tmp39.ToString();
      }
    }


    public partial class add_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public add_result()
      {
      }

      public add_result DeepCopy()
      {
        var tmp41 = new add_result()
        {
        };
        if(__isset.@success)
        {
          tmp41.Success = this.Success;
        }
        tmp41.__isset.@success = this.__isset.@success;
        return tmp41;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp42 = new TStruct("add_result");
          await oprot.WriteStructBeginAsync(tmp42, cancellationToken);
          var tmp43 = new TField();

          if(this.__isset.@success)
          {
            tmp43.Name = "Success";
            tmp43.Type = TType.I32;
            tmp43.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp43, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not add_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp44 = new StringBuilder("add_result(");
        int tmp45 = 0;
        if(__isset.@success)
        {
          if(0 < tmp45++) { tmp44.Append(", "); }
          tmp44.Append("Success: ");
          Success.ToString(tmp44);
        }
        tmp44.Append(')');
        return tmp44.ToString();
      }
    }


    public partial class subtract_args : TBase
    {
      private int _num1;
      private int _num2;

      public int Num1
      {
        get
        {
          return _num1;
        }
        set
        {
          __isset.num1 = true;
          this._num1 = value;
        }
      }

      public int Num2
      {
        get
        {
          return _num2;
        }
        set
        {
          __isset.num2 = true;
          this._num2 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool num1;
        public bool num2;
      }

      public subtract_args()
      {
      }

      public subtract_args DeepCopy()
      {
        var tmp46 = new subtract_args()
        {
        };
        if(__isset.num1)
        {
          tmp46.Num1 = this.Num1;
        }
        tmp46.__isset.num1 = this.__isset.num1;
        if(__isset.num2)
        {
          tmp46.Num2 = this.Num2;
        }
        tmp46.__isset.num2 = this.__isset.num2;
        return tmp46;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Num1 = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Num2 = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp47 = new TStruct("subtract_args");
          await oprot.WriteStructBeginAsync(tmp47, cancellationToken);
          var tmp48 = new TField();
          if(__isset.num1)
          {
            tmp48.Name = "num1";
            tmp48.Type = TType.I32;
            tmp48.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp48, cancellationToken);
            await oprot.WriteI32Async(Num1, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.num2)
          {
            tmp48.Name = "num2";
            tmp48.Type = TType.I32;
            tmp48.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp48, cancellationToken);
            await oprot.WriteI32Async(Num2, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not subtract_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.num1 == other.__isset.num1) && ((!__isset.num1) || (global::System.Object.Equals(Num1, other.Num1))))
          && ((__isset.num2 == other.__isset.num2) && ((!__isset.num2) || (global::System.Object.Equals(Num2, other.Num2))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.num1)
          {
            hashcode = (hashcode * 397) + Num1.GetHashCode();
          }
          if(__isset.num2)
          {
            hashcode = (hashcode * 397) + Num2.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp49 = new StringBuilder("subtract_args(");
        int tmp50 = 0;
        if(__isset.num1)
        {
          if(0 < tmp50++) { tmp49.Append(", "); }
          tmp49.Append("Num1: ");
          Num1.ToString(tmp49);
        }
        if(__isset.num2)
        {
          if(0 < tmp50++) { tmp49.Append(", "); }
          tmp49.Append("Num2: ");
          Num2.ToString(tmp49);
        }
        tmp49.Append(')');
        return tmp49.ToString();
      }
    }


    public partial class subtract_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public subtract_result()
      {
      }

      public subtract_result DeepCopy()
      {
        var tmp51 = new subtract_result()
        {
        };
        if(__isset.@success)
        {
          tmp51.Success = this.Success;
        }
        tmp51.__isset.@success = this.__isset.@success;
        return tmp51;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp52 = new TStruct("subtract_result");
          await oprot.WriteStructBeginAsync(tmp52, cancellationToken);
          var tmp53 = new TField();

          if(this.__isset.@success)
          {
            tmp53.Name = "Success";
            tmp53.Type = TType.I32;
            tmp53.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not subtract_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp54 = new StringBuilder("subtract_result(");
        int tmp55 = 0;
        if(__isset.@success)
        {
          if(0 < tmp55++) { tmp54.Append(", "); }
          tmp54.Append("Success: ");
          Success.ToString(tmp54);
        }
        tmp54.Append(')');
        return tmp54.ToString();
      }
    }


    public partial class multiply_args : TBase
    {
      private int _num1;
      private int _num2;

      public int Num1
      {
        get
        {
          return _num1;
        }
        set
        {
          __isset.num1 = true;
          this._num1 = value;
        }
      }

      public int Num2
      {
        get
        {
          return _num2;
        }
        set
        {
          __isset.num2 = true;
          this._num2 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool num1;
        public bool num2;
      }

      public multiply_args()
      {
      }

      public multiply_args DeepCopy()
      {
        var tmp56 = new multiply_args()
        {
        };
        if(__isset.num1)
        {
          tmp56.Num1 = this.Num1;
        }
        tmp56.__isset.num1 = this.__isset.num1;
        if(__isset.num2)
        {
          tmp56.Num2 = this.Num2;
        }
        tmp56.__isset.num2 = this.__isset.num2;
        return tmp56;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Num1 = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Num2 = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp57 = new TStruct("multiply_args");
          await oprot.WriteStructBeginAsync(tmp57, cancellationToken);
          var tmp58 = new TField();
          if(__isset.num1)
          {
            tmp58.Name = "num1";
            tmp58.Type = TType.I32;
            tmp58.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp58, cancellationToken);
            await oprot.WriteI32Async(Num1, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.num2)
          {
            tmp58.Name = "num2";
            tmp58.Type = TType.I32;
            tmp58.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp58, cancellationToken);
            await oprot.WriteI32Async(Num2, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not multiply_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.num1 == other.__isset.num1) && ((!__isset.num1) || (global::System.Object.Equals(Num1, other.Num1))))
          && ((__isset.num2 == other.__isset.num2) && ((!__isset.num2) || (global::System.Object.Equals(Num2, other.Num2))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.num1)
          {
            hashcode = (hashcode * 397) + Num1.GetHashCode();
          }
          if(__isset.num2)
          {
            hashcode = (hashcode * 397) + Num2.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp59 = new StringBuilder("multiply_args(");
        int tmp60 = 0;
        if(__isset.num1)
        {
          if(0 < tmp60++) { tmp59.Append(", "); }
          tmp59.Append("Num1: ");
          Num1.ToString(tmp59);
        }
        if(__isset.num2)
        {
          if(0 < tmp60++) { tmp59.Append(", "); }
          tmp59.Append("Num2: ");
          Num2.ToString(tmp59);
        }
        tmp59.Append(')');
        return tmp59.ToString();
      }
    }


    public partial class multiply_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public multiply_result()
      {
      }

      public multiply_result DeepCopy()
      {
        var tmp61 = new multiply_result()
        {
        };
        if(__isset.@success)
        {
          tmp61.Success = this.Success;
        }
        tmp61.__isset.@success = this.__isset.@success;
        return tmp61;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp62 = new TStruct("multiply_result");
          await oprot.WriteStructBeginAsync(tmp62, cancellationToken);
          var tmp63 = new TField();

          if(this.__isset.@success)
          {
            tmp63.Name = "Success";
            tmp63.Type = TType.I32;
            tmp63.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp63, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not multiply_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp64 = new StringBuilder("multiply_result(");
        int tmp65 = 0;
        if(__isset.@success)
        {
          if(0 < tmp65++) { tmp64.Append(", "); }
          tmp64.Append("Success: ");
          Success.ToString(tmp64);
        }
        tmp64.Append(')');
        return tmp64.ToString();
      }
    }


    public partial class divide_args : TBase
    {
      private int _num1;
      private int _num2;

      public int Num1
      {
        get
        {
          return _num1;
        }
        set
        {
          __isset.num1 = true;
          this._num1 = value;
        }
      }

      public int Num2
      {
        get
        {
          return _num2;
        }
        set
        {
          __isset.num2 = true;
          this._num2 = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool num1;
        public bool num2;
      }

      public divide_args()
      {
      }

      public divide_args DeepCopy()
      {
        var tmp66 = new divide_args()
        {
        };
        if(__isset.num1)
        {
          tmp66.Num1 = this.Num1;
        }
        tmp66.__isset.num1 = this.__isset.num1;
        if(__isset.num2)
        {
          tmp66.Num2 = this.Num2;
        }
        tmp66.__isset.num2 = this.__isset.num2;
        return tmp66;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Num1 = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Num2 = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp67 = new TStruct("divide_args");
          await oprot.WriteStructBeginAsync(tmp67, cancellationToken);
          var tmp68 = new TField();
          if(__isset.num1)
          {
            tmp68.Name = "num1";
            tmp68.Type = TType.I32;
            tmp68.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp68, cancellationToken);
            await oprot.WriteI32Async(Num1, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.num2)
          {
            tmp68.Name = "num2";
            tmp68.Type = TType.I32;
            tmp68.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp68, cancellationToken);
            await oprot.WriteI32Async(Num2, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not divide_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.num1 == other.__isset.num1) && ((!__isset.num1) || (global::System.Object.Equals(Num1, other.Num1))))
          && ((__isset.num2 == other.__isset.num2) && ((!__isset.num2) || (global::System.Object.Equals(Num2, other.Num2))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.num1)
          {
            hashcode = (hashcode * 397) + Num1.GetHashCode();
          }
          if(__isset.num2)
          {
            hashcode = (hashcode * 397) + Num2.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp69 = new StringBuilder("divide_args(");
        int tmp70 = 0;
        if(__isset.num1)
        {
          if(0 < tmp70++) { tmp69.Append(", "); }
          tmp69.Append("Num1: ");
          Num1.ToString(tmp69);
        }
        if(__isset.num2)
        {
          if(0 < tmp70++) { tmp69.Append(", "); }
          tmp69.Append("Num2: ");
          Num2.ToString(tmp69);
        }
        tmp69.Append(')');
        return tmp69.ToString();
      }
    }


    public partial class divide_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public divide_result()
      {
      }

      public divide_result DeepCopy()
      {
        var tmp71 = new divide_result()
        {
        };
        if(__isset.@success)
        {
          tmp71.Success = this.Success;
        }
        tmp71.__isset.@success = this.__isset.@success;
        return tmp71;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp72 = new TStruct("divide_result");
          await oprot.WriteStructBeginAsync(tmp72, cancellationToken);
          var tmp73 = new TField();

          if(this.__isset.@success)
          {
            tmp73.Name = "Success";
            tmp73.Type = TType.I32;
            tmp73.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp73, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not divide_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp74 = new StringBuilder("divide_result(");
        int tmp75 = 0;
        if(__isset.@success)
        {
          if(0 < tmp75++) { tmp74.Append(", "); }
          tmp74.Append("Success: ");
          Success.ToString(tmp74);
        }
        tmp74.Append(')');
        return tmp74.ToString();
      }
    }

  }

}
